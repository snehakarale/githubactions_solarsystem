on:
  workflow_dispatch:
  push:
    branches:
      - main
      - 'feature/*'

env:
  MONGO_URI: 'mongodb+srv://snehakarale2:${{ secrets.MONGO_PASSWORD }}@cluster0.hppacpg.mongodb.net/'
  MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
  MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}


jobs:
  unit-testing:
    name: Unit Testing
    runs-on: ${{ matrix.operating_system }}
    strategy:
      matrix:
        nodejs_version: [20]
        operating_system: [ubuntu-latest]
        # exclude:
        #   - nodejs_version: 18
        #     operating_system: macos-latest


    services:
      mongo-db:
        image: siddharth67/mongo-db:non-prod
        ports:
          - 27017:27017


    env:
      MONGO_URI: 'mongodb://localhost:27017/superData'
      MONGO_USERNAME: non-prod-user
      MONGO_PASSWORD: non-prod-password


    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4


      - name: Setup Node.js ${{ matrix.nodejs_version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.nodejs_version }}


      - name: Custom Action - Cache & Install NPM Packages
        uses: ./.github/custom-actions/npm-action
        with:
          path-of-folder: node_modules

      - name: Run tests
        run: npm test

      - name: Archive Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-${{ matrix.nodejs_version }}-Mocha-Test-Result
          path: test-results.xml

  code-coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    container:
      image: node:18
    services:
      mongo:
        image: siddharth67/mongo-db:non-prod
        options: --name mongo
    env:
      MONGO_URI: 'mongodb://mongo:27017/superData'
      MONGO_USERNAME: non-prod-user
      MONGO_PASSWORD: non-prod-password


    steps:
      - name: Checkout repository
        uses: actions/checkout@v4


      - name: Custom Action - Cache & Install NPM Packages
        uses: ./.github/custom-actions/npm-action
        with:
          path-of-folder: node_modules

      - name: Run coverage
        run: npm run coverage
        continue-on-error: true

      - name: Archive Test Result
        uses: actions/upload-artifact@v4
        with:
          name: Code-Coverage-Result
          path: coverage
          retention-days: 5

  docker-build-test:
        name: Containerization
        needs: [unit-testing, code-coverage]
        runs-on: ubuntu-latest
        steps:
          - name: Checkout Repository
            uses: actions/checkout@v4


          - name: Log in to Docker Hub
            uses: docker/login-action@v2.2.0
            with:
              username: ${{ vars.DOCKERHUB_USERNAME }}
              password: ${{ secrets.DOCKERHUB_TOKEN }}


          - name: Set up QEMU emulator
            uses: docker/setup-qemu-action@v3


          - name: Set up Docker Buildx
            uses: docker/setup-buildx-action@v3


          - name: Build Docker Image for Testing
            uses: docker/build-push-action@v5
            with:
              context: .
              load: true
              push: false
              tags: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}


          - name: Run Container and Test `/live` Endpoint
            run: |
              docker run --rm --name solar-system-app -d \
                -p 3000:3000 \
                -e MONGO_URI=$MONGO_URI \
                -e MONGO_USERNAME=$MONGO_USERNAME \
                -e MONGO_PASSWORD=$MONGO_PASSWORD \
                ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}


              echo "Verifying /live endpoint"
              wget -q -O - http://127.0.0.1:3000/live | grep live
  
  docker-push-image:
          needs: docker-build-test
          runs-on: ubuntu-latest

      
          steps:
            - name: Checkout code
              uses: actions/checkout@v4


            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v2


            - name: Log in to Docker Hub
              uses: docker/login-action@v2
              with:
                username: ${{ vars.DOCKERHUB_USERNAME }}
                password: ${{ secrets.DOCKERHUB_TOKEN }}


            - name: Docker Build and Push
              uses: docker/build-push-action@v4
              with:
                context: .
                push: true
                tags: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
      
  dev-deploy:
      needs: docker-push-image
      runs-on: ubuntu-latest
      steps:
        - name: Checkout repo
          uses: actions/checkout@v3

        - name: Set up Kubernetes cluster with KinD
          uses: engineerd/setup-kind@v0.5.0
          with:
            version: v0.20.0  # use the latest KinD version

        - name: Confirm Kubernetes is running
          run: |
            kubectl get nodes
            kubectl cluster-info

        - name: Save Nginx Ingress IP
          id: ingress
          run: |
            echo "INGRESS_IP=$(kubectl get svc ingress-nginx-controller --all-namespaces\
              -o jsonpath='{.status.loadBalancer.ingress[0].ip}')" >> $GITHUB_ENV

        - name: Replace tokens in manifests
          uses: cschleiden/replace-tokens@v1
          continue-on-error: true
          with:
            tokenPrefix: '_{_'
            tokenSuffix: '_}_'
            files: kubernetes/development/*.yaml
          env:
            NAMESPACE: ${{ vars.NAMESPACE }}
            REPLICAS: ${{ vars.REPLICAS }}
            IMAGE: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
            INGRESS_IP: ${{ env.INGRESS_IP }}

        - name: Verify replaced manifests
          run: cat kubernetes/development/*.yaml

        - name: Create MongoDB Secret
          run: |
              kubectl create namespace ${{ vars.NAMESPACE }}
              kubectl -n ${{ vars.NAMESPACE }} create secret generic mongo-db-creds \
                --from-literal=MONGO_URI=${{ env.MONGO_URI }} \
                --from-literal=MONGO_USERNAME=${{ env.MONGO_USERNAME }} \
                --from-literal=MONGO_PASSWORD=${{ secrets.MONGO_PASSWORD }} \
                --save-config \
                --dry-run=client \
                -o yaml | kubectl apply -f -

        - name: Deploy to Dev k8s cluster
          run: |
                kubectl apply -f kubernetes/development 