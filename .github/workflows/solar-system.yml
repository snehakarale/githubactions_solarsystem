
name: CI

on: 
   push:
    branches:
      - main
      - 'feature/*'

jobs:
  unit-testing:
    name: Unit Testing
    runs-on: ${{ matrix.operating_system }}
    services:                                  # service continer
      mongo-db:
        image: siddharth67/mongo-db:non-prod   #non-prod mongo db use for testing
        ports:
          - 27017:27017
    env:
         MONGO_URI: 'mongodb://localhost:27017/superData'
         MONGO_USERNAME: non-prod-user
         MONGO_PASSWORD: non-prod-password
    strategy:
      matrix:
        nodejs_version: [20]
        operating_system: [ubuntu-latest]
        # exclude:
        #   - nodejs_version: 18
        #     operating_system: macos-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4


      - name: Setup Node.js ${{ matrix.nodejs_version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.nodejs_version }}


      - name: Custom Action - Cache & Install NPM Packages
        uses: ./.github/custom-actions/npm-action
        with:
          path-of-folder: node_modules

      - name: Run tests
        run: npm test

      - name: Archive Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-${{ matrix.nodejs_version }}-Mocha-Test-Result
          path: test-results.xml


  code-coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    container:                         # Job Container
      image: node:18
    services:                          # Service Container
      mongo:
        image: siddharth67/mongo-db:non-prod
        options: --name mongo
    env:
      MONGO_URI: 'mongodb://mongo:27017/superData'
      MONGO_USERNAME: non-prod-user
      MONGO_PASSWORD: non-prod-password

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Custom Action - Cache & Install NPM Packages
        uses: ./.github/custom-actions/npm-action
        with:
          path-of-folder: node_modules

      - name: Run coverage
        run: npm run coverage
        continue-on-error: true

      - name: Archive Test Result
        uses: actions/upload-artifact@v4
        with:
          name: Code-Coverage-Result
          path: coverage
          retention-days: 5

  docker-build-test:
        name: Containerization
        needs: [unit-testing, code-coverage]
        runs-on: ubuntu-latest
        steps:
          - name: Checkout Repository
            uses: actions/checkout@v4


          - name: Log in to Docker Hub
            uses: docker/login-action@v2.2.0
            with:
              username: ${{ vars.DOCKERHUB_USERNAME }}
              password: ${{ secrets.DOCKERHUB_TOKEN }}

          - name: Set up Docker Buildx
            uses: docker/setup-buildx-action@v3

          - name: Build Docker Image for Testing
            uses: docker/build-push-action@v5
            with:
              context: .
              load: true
              push: false
              tags: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}

          - name: Run Container and Test `/live` Endpoint
            run: |
              docker run --rm --name solar-system-app -d \
                -p 3000:3000 \
                -e MONGO_URI=$MONGO_URI \
                -e MONGO_USERNAME=$MONGO_USERNAME \
                -e MONGO_PASSWORD=$MONGO_PASSWORD \
                ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}

              echo "Verifying /live endpoint"
              wget -q -O - http://127.0.0.1:3000/live | grep live
  
  docker-push-image:
          needs: docker-build-test
          runs-on: ubuntu-latest      
          steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v2

            - name: Log in to Docker Hub
              uses: docker/login-action@v2
              with:
                username: ${{ vars.DOCKERHUB_USERNAME }}
                password: ${{ secrets.DOCKERHUB_TOKEN }}

            - name: Docker Build and Push
              uses: docker/build-push-action@v4
              with:
                context: .
                push: true
                tags: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
      
  dev-deploy-and-testing:
      if: contains(github.ref,'feature/')
      needs: docker-push-image
      uses: ./.github/workflows/reuseable-workflow.yml
      secrets:
        mongodb_password: ${{ secrets.MONGO_PASSWORD}}
      with:
        mongodb-uri : ${{ vars.MONGO_URI }}
        environment: development
        k8s-manifest-dir: kubernetes/development/

  # integration-testing:
  #     name: Dev Integration Testing
  #     needs: dev-deploy
  #     runs-on: ubuntu-latest
  #     steps:
  #       - name: Test `/live` Endpoint
  #         env:
  #           URL: ${{ needs.dev-deploy.outputs.APP_URL }}
  #         run: |
  #           echo "Testing URL: $URL"
  #           curl --retry 5 --retry-delay 3 "$URL/live"


  prod-deploy-and-testing:
      if: github.ref == 'refs/heads/main'
      needs: docker-push-image
      runs-on: ubuntu-latest
      environment:
        name: production
        #url: ${{ steps.get-url.outputs.URL }}/live

      outputs:
        APP_URL: ${{ steps.get-url.outputs.URL }}
      steps:
        - name: Checkout repo
          uses: actions/checkout@v3

        - name: Install Minikube & dependencies
          run: |
            sudo apt-get update
            sudo apt-get install -y conntrack socat
            curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
            sudo install minikube-linux-amd64 /usr/local/bin/minikube
            curl -LO "https://dl.k8s.io/release/$(curl -Ls https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            sudo install kubectl /usr/local/bin/kubectl

        - name: Start Minikube
          run: |
            minikube start --driver=docker --memory=4g --cpus=2
            minikube status

        - name: Replace tokens in manifests
          uses: cschleiden/replace-tokens@v1
          continue-on-error: true
          with:
            tokenPrefix: '_{_'
            tokenSuffix: '_}_'
            files: kubernetes/production/*.yaml
          env:
            NAMESPACE: ${{ vars.NAMESPACE }}
            REPLICAS: ${{ vars.REPLICAS }}
            IMAGE: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
            INGRESS_IP: 127.0.0.1

        - name: Verify replaced manifest
          run: cat kubernetes/production/*.yaml

        - name: Create MongoDB Secret
          run: |
              kubectl create namespace ${{ vars.NAMESPACE }}
              kubectl -n ${{ vars.NAMESPACE }} create secret generic mongo-db-creds \
                --from-literal=MONGO_URI=${{ env.MONGO_URI }} \
                --from-literal=MONGO_USERNAME=${{ env.MONGO_USERNAME }} \
                --from-literal=MONGO_PASSWORD=${{ secrets.MONGO_PASSWORD }} \
                --save-config \
                --dry-run=client \
                -o yaml | kubectl apply -f -

        - name: Deploy to Prod k8s cluster
          run: |
                kubectl apply -f kubernetes/production 

        - name: Wait for Deployment to become ready
          run: |
            kubectl -n ${{ vars.NAMESPACE }} rollout status deployment/solar-system --timeout=150s

        - name: Get App URL
          id: get-url
          run: |
            URL=$(minikube service solar-system --namespace ${{ vars.NAMESPACE }} --url)
            echo "URL=$URL" >> $GITHUB_ENV

        - name: Integration Test /live
          run: |
            echo "Testing $URL/live"
            curl --retry 5 --retry-delay 3 "$URL/live"    

        - name: Dump Kubernetes resources on failure
          if: failure()
          run: |
            kubectl -n ${{ vars.NAMESPACE }} get all
            kubectl -n ${{ vars.NAMESPACE }} describe pods
            kubectl -n ${{ vars.NAMESPACE }} logs deployment/solar-system

